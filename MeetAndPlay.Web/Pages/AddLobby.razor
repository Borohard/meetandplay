@page "/AddLobby/{Id}"
@using MeetAndPlay.Core.Abstraction.Services
@using MeetAndPlay.Web.ViewModels
@using AutoMapper
@attribute [Authorize]
@inject ILobbyService LobbyService
@inject IMapper Mapper

<div class="my-4">
    <h3>@GetPageName()</h3>
</div>
<div class="form-group">
    <label>Выберите игру</label>
    <Select2 TItem="NamedViewModel"
             Id="games-select"
             Data="@Resources"
             TextExpression="@(item => item.Name)"
             @bind-Value="@MockResult">
    </Select2>
</div>
<h3>@MockResult.Name</h3>

@code {
    [Parameter]
    public string Id { get; set; }

    public AddLobbyViewModel LobbyModel = new ();

    public NamedViewModel MockResult = new();

    public List<NamedViewModel> Resources = new()
    {
        new NamedViewModel {Id = Guid.NewGuid(), Name = "Тестовые данные 1"},
        new NamedViewModel {Id = Guid.NewGuid(), Name = "Тестовые данные 2"},
        new NamedViewModel {Id = Guid.NewGuid(), Name = "Тестовые данные 3"},
        new NamedViewModel {Id = Guid.NewGuid(), Name = "Тестовые данные 4"},
        new NamedViewModel {Id = Guid.NewGuid(), Name = "Тестовые данные 5"},
        new NamedViewModel {Id = Guid.NewGuid(), Name = "Тестовые данные 6"},
    };
    
    protected override async Task OnInitializedAsync()
    {
        if (Id != null && Guid.TryParse(Id, out var parsedId))
        {
            var lobby = await LobbyService.GetLobbyByIdAsync(parsedId);
            LobbyModel = Mapper.Map<AddLobbyViewModel>(lobby);
        }
    }

    public string GetPageName()
    {
        return Id != null ? "Обновить лобби" : "Создать лобби";
    }
}